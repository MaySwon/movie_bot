const TelegramBot = require('node-telegram-bot-api')
const helper = require('./helpers')
const emojiUnicode = require("emoji-unicode");
const config = require ('./config')
const mongoose = require('mongoose')
const database = require('./data base.json')
const TOKEN  = '1164043270:AAHAheom3TNAfZIp-PV_Ch9bzdDliw4mllw'
helper.logStart()
const fs= require('fs')
const bot = new TelegramBot(TOKEN,{
    polling: {
        interval : 300,
        autoStart: true,
        params:{
            timeout:10
        }
    }
})
console.log(emojiUnicode("üî•"));
mongoose.connect(config.DB_URL,{
    useNewUrlParser: true
})
    .then(()=>console.log('MongoDb has started...'))
    .catch(e=> console.log(e))

   require('./models/Review')
    require('./models/user.model')
const Film = mongoose.model('films')
const User = mongoose.model('users')
//database.films.forEach(f=> new Film(f).save().catch(e=> console.log(e)))
const ACTION_TYPE = {
    TOGGLE_FAV_FILM:'tff'
}
bot.on('callback_query', query => {
    const userId = query.from.id
    let data
    try{
        data = JSON.parse(query.data)
    } catch (e) {
        throw  new Error('Data is not an object')

    }
    const { type } = data
    if (type === ACTION_TYPE.TOGGLE_FAV_FILM){
        toggleFavouriteFilm(userId, query.id, data)
    }
})

bot.onText(/\/f(.+)/,(msg,[source, match])=>{
const chatId = helper.getChatId(msg)
 const filmUuid = helper.getItemUuid(source)


    Promise.all([
        Film.findOne({uuid: filmUuid}),
        User.findOne({telegramId: msg.from.id})
    ]).then(([film,user])=>{

        let isFav = false
        if(user) {
            isFav = user.films.indexOf(film.uuid) !== -1
        }

        const favText = isFav ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'


        const caption = `–ù–∞–∑–≤–∞–Ω–∏–µ:${film.name}\n –ì–æ–¥: ${film.year}\n –†–µ–π—Ç–∏–Ω–≥: ${film.year}\n –†–µ–∂–∏—Å—Å–µ—Ä:${film.director}`
        bot.sendPhoto(chatId, film.picture,{
            caption:caption,
            reply_markup:{
                inline_keyboard:[
                    [
                        {
                            text:favText,
                            callback_data:JSON.stringify({
                                type: ACTION_TYPE.TOGGLE_FAV_FILM,
                                filmUuid:film.uuid,
                                isFav: isFav
                            })

                        },
                        {
                            text:'–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã',
                            callback_data:film.uuid
                        }
                    ],
                    [
                        {
                            text:`–ö–∏–Ω–æ–ø–æ–∏—Å–∫: ${film.name}`,
                            url: film.link
                        }
                    ]
                ]
            }

    })
    })
    User.findOne({telegramId: msg.from.id})

    Film.findOne({uuid: filmUuid})
})




bot.on('message', msg=>{
    const chatId = helper.getChatId(msg)
    console.log('Working with ', msg.from.first_name)
    switch (msg.text) {
        case '–§–∏–ª—å–º—ã':
            bot.sendMessage(chatId,`    –•–º,—Ñ–∏–ª—å–º–µ—Ü?
–í—ã–±–µ—Ä–∏ –∫–∞–∫ —Ç–µ–±–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã:`,{

                reply_markup :{
                    keyboard: keyboard1,resize_keyboard:true,
                }
            })
            break
        case '–ü–æ –∂–∞–Ω—Ä–∞–º üé¨':
            bot.sendMessage(helper.getChatId(msg), `–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:`, {
                reply_markup: {
                    keyboard: keyboard2,resize_keyboard:true
                }

            })
            break
        case'–ö–æ–º–µ–¥–∏—è':
            sendFilmsByQuery(chatId,{type:'comedy'})
            break
        case'–ë–æ–µ–≤–∏–∫':
            sendFilmsByQuery(chatId,{type:'action'})
            break
        case'–î—Ä–∞–º–∞':
            sendFilmsByQuery(chatId,{type:'dram'}).catch(e=> console.log(e))
            break

        case '–¢—Ä–∏–ª–ª–µ—Ä':
            sendFilmsByQuery(chatId,{type:'thriller'})
            break
        case '–ù–∞–∑–∞–¥':
            bot.sendMessage(chatId,

'–í—ã–±–µ—Ä–∏ –∫–∞–∫ —Ç–µ–±–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã:',{

                reply_markup :{
                    keyboard: keyboard1,resize_keyboard:true,
                }
            })
            break
        case '/start':   bot.sendMessage(chatId,`    –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!
–°–µ–π—á–∞—Å –Ω–∞–π–¥–µ–º —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å`,{

            reply_markup :{
                keyboard: keyboard0,resize_keyboard:true,
            }
        }).then(
            bot.sendSticker(chatId,stickersList[getRandomInt(0, stickersList.length)])
        )
            break
        case'–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
            showFavouriteFilms(chatId,msg.from.id)
            break
        case '–ùa–∑–∞–¥':
            bot.sendMessage(chatId,

                '–í—ã–±–µ—Ä–∏ –∫–∞–∫ —Ç–µ–±–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã:',{

                    reply_markup :{
                        keyboard: keyboard0,resize_keyboard:true,
                    }
                })
            break;
        case `–ü–æ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞–º üé•`:
            bot.sendMessage(chatId, '–î–∞ —Ç—ã —Ü–µ–Ω–∏—Ç–µ–ª—å, –ø—Ä–∏—è—Ç–µ–ª—å!',{
                reply_markup :{
                    keyboard: keyboard3,resize_keyboard:true,
                }
            })
            break
        case '–í—Å–µ —Ñ–∏–ª—å–º—ã':
           sendFilmsByQuery(chatId,{})
        break
        case '–ö–≤–µ–Ω—Ç–∏–Ω –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ':
            sendDirectorsByQuery(chatId,{director:'–ö–≤–µ–Ω—Ç–∏–Ω –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ'})
            break
        case '–°—Ç—ç–Ω–ª–∏ –ö—É–±—Ä–∏–∫':
            sendDirectorsByQuery(chatId,{director:'–°—Ç—ç–Ω–ª–∏ –ö—É–±—Ä–∏–∫'})
            break
        case '–ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ':
            sendDirectorsByQuery(chatId,{director:'–ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ'})
            break
        case '–£—ç—Å –ê–Ω–¥–µ—Ä—Å–æ–Ω':
            sendDirectorsByQuery(chatId,{director:'–£—ç—Å –ê–Ω–¥–µ—Ä—Å–æ–Ω'})
            break
        case '–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω':
            sendDirectorsByQuery(chatId,{director:'–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω'})
            break
        case '–ì–∞–π –†–∏—á–∏':
            sendDirectorsByQuery(chatId,{director:'–ì–∞–π –†–∏—á–∏'})
            break
        case '/help':
            const html2 = `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ /start.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ –∏ –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.
–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π —Ñ–∏–ª—å–º—ã –ø–æ —Å–≤–æ–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–æ—Ç —Ç–∞–∫:
1 –î–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –Ω–µ–±–µ—Å - /ff890
2 1+1 - /ff789
3 –§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø - /ff678
    
–ù–∞–∂–º–∏ –Ω–∞ "/f****", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ.`
            bot.sendMessage(chatId, html2,{
                parse_mode: 'HTML'
            })
           
            break
        /*default:
            const html= `          –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç <a href="https://www.instagram.com/notes_of_fool/?igshid=5kanaxsnorn8">notes_of_fools</a> .
–Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±–µ —Ñ–∏–ª—å–º —Å –º–∏–Ω–∏-—Ä–µ—Ü–µ–Ω–∑–∏–µ–π –æ—Ç –º–æ–µ–≥–æ 
—Å–æ–∑–¥–∞—Ç–µ–ª—è.
–ö–æ–µ-—á—Ç–æ –æ–±–æ –º–Ω–µ:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π.
/help  - —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.
/author - –æ–± –∞–≤—Ç–æ—Ä–µ
–ü—Ä–æ–±–ª–µ–º–∞ –≤ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ? –ü–∏—à–∏ —Å—é–¥–∞:
@Pashka_sigarett`
                bot.sendMessage(chatId, html,{
                    parse_mode: 'HTML'
                })
            break;*/
    }
})
bot.on('callback_query',query =>{

    const{ chat, message_id, text} = query.message

    switch (query.data) {
        case'back1':
            // –∫—É–¥–∞, –æ—Ç–∫—É–¥–∞, —á—Ç–æ
            bot.sendMessage(chat.id,'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä',{
                reply_markup :{
                    keyboard: keyboard1,resize_keyboard:true,
                }
                })
            break

    }
    bot.answerCallbackQuery({
        callback_query_id: query.id
    })
})

/*bot.on('message',msg=>{
    const chatId = msg.chat.id
    bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç notes_of_fools.
  –ò —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±–µ —Ñ–∏–ª—å–º —Å –º–∏–Ω–∏-—Ä–µ—Ü–µ–Ω–∑–∏–µ–π –æ—Ç –º–æ–µ–≥–æ 
  —Å–æ–∑–¥–∞—Ç–µ–ª—è.
  –ö–æ–µ-—á—Ç–æ –æ–±–æ –º–Ω–µ:
  /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π.`)
})*/

const keyboard0 = [
    [
        {
           text: '–§–∏–ª—å–º—ã'
        }  ,
        {
            text: '–í—Å–µ —Ñ–∏–ª—å–º—ã'
        }
    ],
    [
        {
            text: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        }
    ]
]

const keyboard1= [
    [
        {
            text:'–ü–æ –∂–∞–Ω—Ä–∞–º üé¨',
            callback_data:'style'
        },
        {
            text:`–ü–æ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞–º üé•`,
            callback_data:'Directors'
        }
    ],
    [
        {
            text:'–ù–µ–¥–∞–≤–Ω–∏–µ üçø',
            callback_data:'edit'
        },
        {
            text:'–¢–æ–ø 10 —Å–µ–π—á–∞—Å üî•',
            callback_data:'delete'
        }

    ],
    [
        {
            text: '–ùa–∑–∞–¥'
    }

    ]

]


const keyboard2 = [
    [
        {
            text:'–ö–æ–º–µ–¥–∏—è',
            callback_data:'comedy'
        },
        {
            text:'–î—Ä–∞–º–∞',
            callback_data:'dram'
        }
    ],
    [
        {
            text:'–ë–æ–µ–≤–∏–∫',
            callback_data:'Action'
        },
        {
            text:'–¢—Ä–∏–ª–ª–µ—Ä',
            callback_data:'thriller'
        }

    ],[
    {
        text: '–ù–∞–∑–∞–¥',
        callback_data:'back'
    }
    ]

]

const keyboard3 = [
    [
        {
            text:'–ö–≤–µ–Ω—Ç–∏–Ω –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ'
        },
        {
            text:'–°—Ç—ç–Ω–ª–∏ –ö—É–±—Ä–∏–∫'
        },
        {
            text:'–ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ'
        }
    ],
    [
        {
            text:'–£—ç—Å –ê–Ω–¥–µ—Ä—Å–æ–Ω'
        },
        {
            text:'–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω'
        },
        {
            text:'–ì–∞–π –†–∏—á–∏'
        }

    ],
    [
        {
            text: '–ù–∞–∑–∞–¥',
            callback_data:'back1'
        }
    ]
]

function sendFilmsByQuery(chatId, query) {
    Film.find(query).then(films => {
        console.log(films)

        const html = films.map((f,i)=>{
           return `<b>${i+1}</b> ${f.name} - /f${f.uuid}`
        }).join('\n')
        bot.sendMessage(chatId,html,{
            parse_mode:'HTML',
            reply_markup:{
                keyboard:keyboard2,resize_keyboard:true
            }
            })
        })
    }
function sendHtml(chatId, html, keyboard0 = null) {
    const options = {
        parse_mode: 'HTML'
    }

    bot.sendMessage(chatId, html, options)
}
function sendDirectorsByQuery(chatId, query) {
    Film.find(query).then(films => {
        console.log(films)

        const html = films.map((f,i)=>{
            return `<b>${i+1}</b> ${f.name} - /f${f.uuid}`
        }).join('\n')
        bot.sendMessage(chatId,html,{
            parse_mode:'HTML',
            reply_markup:{
                keyboard:keyboard3,resize_keyboard:true
            }
        })
    })
}

function toggleFavouriteFilm (userId,queryId,{filmUuid,isFav}) {
    let UserPromise
    User.findOne({telegramId: userId})
        .then(user =>{
            if(user) {
            if (isFav) {
                user.films = user.films.filter(fUuid => fUuid !== filmUuid)
            } else {
                user.films.push(filmUuid)
            }

            userPromise = user
            }else{
               userPromise =  new User({
                    telegramId: userId,
                    films:[filmUuid]
                })
            }

            const answerText = isFav? '–£–¥–∞–ª–µ–Ω–æ': '–î–æ–±–∞–≤–ª–µ–Ω–æ'

            userPromise.save().then(_ =>{
                bot.answerCallbackQuery({
                    callback_query_id:queryId,
                    text:answerText
                })
            }).catch(err => console.log(err))
        }).catch(err => console.log(err))
}

function showFavouriteFilms(chatId, telegramId) {
    User.findOne({telegramId})
        .then(user => {

            if (user) {
                Film.find({uuid: {'$in': user.films}}).then(films => {
                    let html
                    if (films.length) {
                        html = films.map(f => {
                            return `${f.name} - <b>${f.rate}</b> (/f${f.uuid})`
                        }).join('\n')
                        html = `<b>–í–∞—à–∏ —Ñ–∏–ª—å–º—ã:</b>\n${html}`
                    } else {
                        html = '–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏'
                    }

                    sendHtml(chatId, html,  {reply_markup:{
                        keyboard:keyboard0,resize_keyboard:true
                    }})
                })
            } else {
                sendHtml(chatId, '–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏', {reply_markup:{
                        keyboard:keyboard0,resize_keyboard:true
                    }})
            }
        }).catch(e => console.log(e))
}
function getRandomInt(aMin, aMax)
{
    return Math.floor(Math.random() * (aMax - aMin + 1)) + aMin;
}
const stickersList = [
    'CAACAgIAAxkBAAINZV9IxiUPZpuQdHGHLsyavQABkQMcIgACRggAAnlc4gn0uTvJhfK2JRsE',
    'CAACAgIAAxkBAAINYl9IxhVqyxG-Thfi1ZqDKlAh-BKeAAI0CAACeVziCQoF4ydIkHE_GwQ',
    'CAACAgIAAxkBAAINcV9IxkqIU9HH60RVjdkPfb5RlHdnAAJzCgACLw_wBvn8MfjLw8vQGwQ',
    'CAACAgIAAxkBAAINel9I0Fm65oK-6V6h88JGocAVgT71AAIpAQACihKqDt3ePFfV082qGwQ',
    'CAACAgIAAxkBAAINa19Ixi_iuVNsLt69D3rQ-3xPSbJBAALjBwACeVziCe2Rc7NmvPaaGwQ',
    'CAACAgIAAxkBAAINg19I1byfZa6bW9qFE-iOGxbBlJ2SAAKIAgACusCVBUJhnbbkdoWqGwQ',
    'CAACAgIAAxkBAAINgF9I1au45HZBI_51nwhEXj5BabkpAALbAQADOKAKuoQ1kxQ5yMobBA',
    'CAACAgIAAxkBAAINjl9I5DFOcATHfSSSFX-v50j3kqmFAAICAQACCAcCAAHs3PVJi3vj2BsE',
    'CAACAgIAAxkBAAINkV9I5Djgpdm9S866-8u3oXo60Jr9AAL8AAMIBwIAAQYu78D5c-fCGwQ',
    'CAACAgIAAxkBAAINml9I5D3OSYMYb0MJ4N2UjqWvh67rAALkAAMIBwIAAZlR-LlCHmlMGwQ',
    'CAACAgIAAxkBAAINl19I5Dl8QH6ngDvoRBbdv1sq_YhUAAL2AAMIBwIAAao2rPRta17yGwQ'
]
   /* function  sendHTML(chatId, html,kbName=null) {
    const options = {
        parse_mode:'HTML'
    }
    if(kbName){
        options['reply_markup']={
            keyboard:[kbName]
        }
    }
        bot.sendMessage(chatId,html, options)
    }*/

/*bot.on('callback_query',query =>{

    const{ chat, message_id, text} = query.message

    switch (query.data) {
        case'style':
            // –∫—É–¥–∞, –æ—Ç–∫—É–¥–∞, —á—Ç–æ
            bot.sendMessage(chat.id,'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä',{
                reply_markup :{
                    inline_keyboard2
                },})
            break
        case 'Reply':
            bot.sendMessage(chat.id, `–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`, {
                reply_to_message_id:message_id

            })
            break
        case  'edit':
            bot.editMessageText(`${text}  (edited)`,{
                chat_id:chat.id,
                message_id: message_id,
                reply_markup: {inline_keyboard}
            })
            break
        case 'delete':
            bot.deleteMessage(chat.id, message_id)
            break

    }
    bot.answerCallbackQuery({
        callback_query_id: query.id
    })
})
bot.on('callback_query',query =>{

    const{ chat, message_id, text} = query.message


})
const inline_keyboard2 = [
    [
        {
            text:'–ö–æ–º–µ–¥–∏–∏',
            callback_data:'1'
        },
        {
            text:'–î—Ä–∞–º—ã',
            callback_data:'2'
        }
    ],
    [
        {
            text:'–ë–æ–µ–≤–∏–∫',
            callback_data:'3'
        },
        {
            text:'–õ—é–±–∏—Ç–µ–ª—å—Å–∫–æ–µ',
            callback_data:'4'
        }

    ]

]/*
 switch (query.data) {
        case'style':
            // –∫—É–¥–∞, –æ—Ç–∫—É–¥–∞, —á—Ç–æ
            bot.sendMessage(chat.id,'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä',{
                reply_markup :{
                   inline_keyboard2
                },})
            break
        case 'Reply':
            bot.sendMessage(chat.id, `–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`, {
                reply_to_message_id:message_id

            })
            break
        case  'edit':
            bot.editMessageText(`${text}  (edited)`,{
                chat_id:chat.id,
                message_id: message_id,
                reply_markup: {inline_keyboard}
            })
            break
        case 'delete':
            bot.deleteMessage(chat.id, message_id)
            break

    }
    bot.answerCallbackQuery({
        callback_query_id: query.id
    })
/*bot.onText(/\/pay/, msg => {
    const chatId = msg.chat.id
bot.sendInvoice(
    chatId,
    'Audi A4',
    'Your bunny wrote',
    'Payload',
    '381764678:TEST:18643',
    'Some_random_string',
    'RUB',
    [
        {
            label:'audi_a4',
            amount: 30000
        }
    ],
    {
        photo_url: 'https://cstor.nn2.ru/userfiles/data/ufiles/16/73/45/543273de27967_31990_audi_a4.jpg',
        need_name: true,
        is_flexible: true
    }
)
})*/




/*bot.onText(/\/cont/, msg =>{
    bot.sendContact(msg.chat.id,'89996762336', '–ù–æ–ª–∞–Ω',{
        last_name: '–ì–µ–Ω–∏–π'
    } )
})*/



/*bot.onText(/\/loc/, msg =>{

    bot.sendLocation(msg.chat.id,  57.032071,34.956679)
})*///–æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è


/*bot.onText(/\/v3/,msg =>{
    const chatId = msg.chat.id

    bot.sendMessage(chatId, 'Sending video...')
        fs.readFile(__dirname +'/55555 3-1.m4v',(err,video) =>{
    bot.sendVideoNote(chatId,video)
})

})*/




/*bot.onText(/\/s2/, msg=>{
 fs.readFile(__dirname +'/kek.webp',(err,sticker) =>{
     bot.sendSticker(msg.chat.id,sticker)
 })
})*/





/*bot.onText(/\/doc2/, msg =>{
bot.sendMessage(msg.chat.id, 'Upload start....')
    fs.readFile(__dirname+'/Witch.rar', (err,file)=>{

        bot.sendDocument(msg.chat.id, file,{
            caption:'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è witcher'
        }).then(()=>{
            bot.sendMessage(msg.chat.id,'Upload finish...')
        })
    })
})*/



/*bot.onText(/\/audio2/, msg =>{
    bot.sendMessage(msg.chat.id, 'Start audio uploading...')
    fs.readFile(__dirname+'/pin.mp3', (err,data)=>{
        bot.sendAudio(msg.chat.id,data) .then(()=>{
            bot.sendMessage(msg.chat.id, 'Uploading finished')

        })
    })
})*/

/*bot.onText(/\/pic/, msg =>{
bot.sendPhoto(msg.chat.id,fs.readFileSync(__dirname +'/primal.jpg') )
})*/


/*bot.onText(/\/pics/, msg =>{
    bot.sendPhoto(msg.chat.id,'./primal.jpg',{
        caption: 'This is cat photo'
    })
})*/






/*const inline_keyboard = [
    [
        {
            text:'Forward',
            callback_data:'forward'
        },
        {
            text:'Reply',
            callback_data:'Reply'
        }
    ],
    [
        {
            text:'Edit',
            callback_data:'edit'
        },
        {
            text:'delete',
            callback_data:'delete'
        }

    ]

]

bot.on('callback_query',query =>{

    const{ chat, message_id, text} = query.message

    switch (query.data) {
        case'forward':
            // –∫—É–¥–∞, –æ—Ç–∫—É–¥–∞, —á—Ç–æ
            bot.forwardMessage(chat.id,chat.id, message_id)
            break
        case 'Reply':
            bot.sendMessage(chat.id, `–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ`, {
                reply_to_message_id:message_id

            })
            break
        case  'edit':
            bot.editMessageText(`${text}  (edited)`,{
              chat_id:chat.id,
              message_id: message_id,
                reply_markup: {inline_keyboard}
            })
            break
        case 'delete':
            bot.deleteMessage(chat.id, message_id)
            break

    }
    bot.answerCallbackQuery({
        callback_query_id: query.id
    })
})*/




/*bot.onText(/\/start/,(msg,[source, match]) =>{

    const chatId = msg.chat.id
    bot.sendMessage(chatId,'Keyboard',{
        reply_markup :{
            inline_keyboard
        }
    })
})*/





/*bot.on('inline_query', query => {

    const results = []
for(let i =0;i<5;i++){
    results.push({
        type:'article',
        id: i.toString(),
        title:'Title' +i,
        input_message_content:{
            message_text:`Article ${i+1}`
        }
    })
}

    bot.answerInlineQuery(query.id,results,{
        cache_time:0
    })
})*/



/*bot.on('message',  (msg) => {
    console.log(msg)
    const {id} = msg.chat
  /* if(msg.text.toLowerCase() === 'hello') {
       bot.sendMessage(id, '–ü—Ä–∏–≤–µ—Ç—É–ª–∏, '+ msg.from.first_name)
   }
   else{})
       bot.sendMessage(id,debug(msg))
           .then(() => {
               console.log('Message has been send')
           })
           .catch((error) => {
               console.error(error)
           })

})*/

/*bot.onText(/\/start/, msg=> {
    const {id} = msg.chat
    bot.sendMessage(id,debug(msg))
})*/

/*bot.onText(/\/help (.+)/,(msg, [source, match])=>{
    const {id} = msg.chat
    bot.sendMessage(id, debug(match))
})*/
/*bot.on('message', msg => {

    const html = `
<strong>Hello, ${msg.from.first_name}</strong>
<i>Test message</i>
 <pre>
  ${debug(msg)}
 </pre>
    `
    bot.sendMessage(msg.chat.id,html,{
        parse_mode:'HTML'
    })
})*/
/*bot.on('message', msg =>{
const markdown = `
*Hello, ${msg.from.first_name}*
_Italic text_
`
    bot.sendMessage(msg.chat.id, markdown,{
        parse_mode:'Markdown'
    })

})  */

/*bot.on('message', msg =>{

    setTimeout(()=> {
        bot.sendMessage(msg.chat.id, `https://transfiles.ru/`, {
            disable_web_page_preview: true, // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –±–µ–∑
            disable_notification:true,
        })
    },4000)

    })*/

/*bot.on('message', msg =>{

    const chatId = msg.chat.id

    if (msg.text ==='–ó–∞–∫—Ä—ã—Ç—å'){

     bot.sendMessage(chatId,'–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',{
         reply_markup: {
             remove_keyboard:true
         }
     })

    } else if(msg.text ==='–û—Ç–≤–µ—Ç–∏—Ç—å'){

        bot.sendMessage(chatId,'–û—Ç–≤–µ—á–∞—é',{
            reply_markup: {
                force_reply:true
            }
        })
    } else {
        bot.sendMessage(chatId, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞',{
            reply_markup:{
                keyboard: [
                    [{
                    text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                        request_location: true
                    }],
                    ['–û—Ç–≤–µ—Ç–∏—Ç—å','–ó–∞–∫—Ä—ã—Ç—å'],
                    [{
                    text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                        request_contact:true
                    }],
                ],
                one_time_keyboard:true
            }
        })
    }

})*/
/*bot.on('message',msg =>{

    const chatId = msg.chat.id

    bot.sendMessage(chatId, 'Inline keyboard',{
        reply_markup:{
            inline_keyboard:[

                [
                    {
                text: 'Google',
                url:'https://google.com'
                }
                ],
                [
                    {
                        text:'Reply',
                        callback_data:'reply'

                    },
                    {
                        text:'Forward',
                        callback_data:'forward'
                    }
                ]
            ]
        }
    })
})*/

/*bot.on('callback_query', query => {
  // bot.sendMessage(query.message.chat.id, debug(query))

    bot.answerCallbackQuery(query.id, `${query.data}`)
})*/